<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: config.proto
//   Date: 2014-07-20 12:33:10

namespace  {

  class DeviceConfigurationProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $touchScreen = null;
    
    /**  @var int */
    public $keyboard = null;
    
    /**  @var int */
    public $navigation = null;
    
    /**  @var int */
    public $screenLayout = null;
    
    /**  @var boolean */
    public $hasHardKeyboard = null;
    
    /**  @var boolean */
    public $hasFiveWayNavigation = null;
    
    /**  @var int */
    public $screenDensity = null;
    
    /**  @var int */
    public $glEsVersion = null;
    
    /**  @var string[]  */
    public $systemSharedLibrary = array();
    
    /**  @var string[]  */
    public $systemAvailableFeature = array();
    
    /**  @var string[]  */
    public $nativePlatform = array();
    
    /**  @var int */
    public $screenWidth = null;
    
    /**  @var int */
    public $screenHeight = null;
    
    /**  @var string[]  */
    public $systemSupportedLocale = array();
    
    /**  @var string[]  */
    public $glExtension = array();
    
    /**  @var int */
    public $deviceClass = null;
    
    /**  @var int */
    public $maxApkDownloadSizeMb = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.DeviceConfigurationProto');

      // OPTIONAL INT32 touchScreen = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "touchScreen";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 keyboard = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "keyboard";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 navigation = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "navigation";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 screenLayout = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "screenLayout";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL hasHardKeyboard = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "hasHardKeyboard";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL hasFiveWayNavigation = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "hasFiveWayNavigation";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 screenDensity = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "screenDensity";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 glEsVersion = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "glEsVersion";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING systemSharedLibrary = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "systemSharedLibrary";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING systemAvailableFeature = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "systemAvailableFeature";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING nativePlatform = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "nativePlatform";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 screenWidth = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "screenWidth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 screenHeight = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "screenHeight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING systemSupportedLocale = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "systemSupportedLocale";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING glExtension = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "glExtension";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 deviceClass = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "deviceClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxApkDownloadSizeMb = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "maxApkDownloadSizeMb";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <touchScreen> has a value
     *
     * @return boolean
     */
    public function hasTouchScreen(){
      return $this->_has(1);
    }
    
    /**
     * Clear <touchScreen> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearTouchScreen(){
      return $this->_clear(1);
    }
    
    /**
     * Get <touchScreen> value
     *
     * @return int
     */
    public function getTouchScreen(){
      return $this->_get(1);
    }
    
    /**
     * Set <touchScreen> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setTouchScreen( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <keyboard> has a value
     *
     * @return boolean
     */
    public function hasKeyboard(){
      return $this->_has(2);
    }
    
    /**
     * Clear <keyboard> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearKeyboard(){
      return $this->_clear(2);
    }
    
    /**
     * Get <keyboard> value
     *
     * @return int
     */
    public function getKeyboard(){
      return $this->_get(2);
    }
    
    /**
     * Set <keyboard> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setKeyboard( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <navigation> has a value
     *
     * @return boolean
     */
    public function hasNavigation(){
      return $this->_has(3);
    }
    
    /**
     * Clear <navigation> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearNavigation(){
      return $this->_clear(3);
    }
    
    /**
     * Get <navigation> value
     *
     * @return int
     */
    public function getNavigation(){
      return $this->_get(3);
    }
    
    /**
     * Set <navigation> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setNavigation( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <screenLayout> has a value
     *
     * @return boolean
     */
    public function hasScreenLayout(){
      return $this->_has(4);
    }
    
    /**
     * Clear <screenLayout> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearScreenLayout(){
      return $this->_clear(4);
    }
    
    /**
     * Get <screenLayout> value
     *
     * @return int
     */
    public function getScreenLayout(){
      return $this->_get(4);
    }
    
    /**
     * Set <screenLayout> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setScreenLayout( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <hasHardKeyboard> has a value
     *
     * @return boolean
     */
    public function hasHasHardKeyboard(){
      return $this->_has(5);
    }
    
    /**
     * Clear <hasHardKeyboard> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearHasHardKeyboard(){
      return $this->_clear(5);
    }
    
    /**
     * Get <hasHardKeyboard> value
     *
     * @return boolean
     */
    public function getHasHardKeyboard(){
      return $this->_get(5);
    }
    
    /**
     * Set <hasHardKeyboard> value
     *
     * @param boolean $value
     * @return \DeviceConfigurationProto
     */
    public function setHasHardKeyboard( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <hasFiveWayNavigation> has a value
     *
     * @return boolean
     */
    public function hasHasFiveWayNavigation(){
      return $this->_has(6);
    }
    
    /**
     * Clear <hasFiveWayNavigation> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearHasFiveWayNavigation(){
      return $this->_clear(6);
    }
    
    /**
     * Get <hasFiveWayNavigation> value
     *
     * @return boolean
     */
    public function getHasFiveWayNavigation(){
      return $this->_get(6);
    }
    
    /**
     * Set <hasFiveWayNavigation> value
     *
     * @param boolean $value
     * @return \DeviceConfigurationProto
     */
    public function setHasFiveWayNavigation( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <screenDensity> has a value
     *
     * @return boolean
     */
    public function hasScreenDensity(){
      return $this->_has(7);
    }
    
    /**
     * Clear <screenDensity> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearScreenDensity(){
      return $this->_clear(7);
    }
    
    /**
     * Get <screenDensity> value
     *
     * @return int
     */
    public function getScreenDensity(){
      return $this->_get(7);
    }
    
    /**
     * Set <screenDensity> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setScreenDensity( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <glEsVersion> has a value
     *
     * @return boolean
     */
    public function hasGlEsVersion(){
      return $this->_has(8);
    }
    
    /**
     * Clear <glEsVersion> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearGlEsVersion(){
      return $this->_clear(8);
    }
    
    /**
     * Get <glEsVersion> value
     *
     * @return int
     */
    public function getGlEsVersion(){
      return $this->_get(8);
    }
    
    /**
     * Set <glEsVersion> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setGlEsVersion( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <systemSharedLibrary> has a value
     *
     * @return boolean
     */
    public function hasSystemSharedLibrary(){
      return $this->_has(9);
    }
    
    /**
     * Clear <systemSharedLibrary> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearSystemSharedLibrary(){
      return $this->_clear(9);
    }
    
    /**
     * Get <systemSharedLibrary> value
     *
     * @param int $idx
     * @return string
     */
    public function getSystemSharedLibrary($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <systemSharedLibrary> value
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function setSystemSharedLibrary( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <systemSharedLibrary>
     *
     * @return string[]
     */
    public function getSystemSharedLibraryList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <systemSharedLibrary>
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function addSystemSharedLibrary( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <systemAvailableFeature> has a value
     *
     * @return boolean
     */
    public function hasSystemAvailableFeature(){
      return $this->_has(10);
    }
    
    /**
     * Clear <systemAvailableFeature> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearSystemAvailableFeature(){
      return $this->_clear(10);
    }
    
    /**
     * Get <systemAvailableFeature> value
     *
     * @param int $idx
     * @return string
     */
    public function getSystemAvailableFeature($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <systemAvailableFeature> value
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function setSystemAvailableFeature( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <systemAvailableFeature>
     *
     * @return string[]
     */
    public function getSystemAvailableFeatureList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <systemAvailableFeature>
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function addSystemAvailableFeature( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <nativePlatform> has a value
     *
     * @return boolean
     */
    public function hasNativePlatform(){
      return $this->_has(11);
    }
    
    /**
     * Clear <nativePlatform> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearNativePlatform(){
      return $this->_clear(11);
    }
    
    /**
     * Get <nativePlatform> value
     *
     * @param int $idx
     * @return string
     */
    public function getNativePlatform($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <nativePlatform> value
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function setNativePlatform( $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <nativePlatform>
     *
     * @return string[]
     */
    public function getNativePlatformList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <nativePlatform>
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function addNativePlatform( $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <screenWidth> has a value
     *
     * @return boolean
     */
    public function hasScreenWidth(){
      return $this->_has(12);
    }
    
    /**
     * Clear <screenWidth> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearScreenWidth(){
      return $this->_clear(12);
    }
    
    /**
     * Get <screenWidth> value
     *
     * @return int
     */
    public function getScreenWidth(){
      return $this->_get(12);
    }
    
    /**
     * Set <screenWidth> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setScreenWidth( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <screenHeight> has a value
     *
     * @return boolean
     */
    public function hasScreenHeight(){
      return $this->_has(13);
    }
    
    /**
     * Clear <screenHeight> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearScreenHeight(){
      return $this->_clear(13);
    }
    
    /**
     * Get <screenHeight> value
     *
     * @return int
     */
    public function getScreenHeight(){
      return $this->_get(13);
    }
    
    /**
     * Set <screenHeight> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setScreenHeight( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <systemSupportedLocale> has a value
     *
     * @return boolean
     */
    public function hasSystemSupportedLocale(){
      return $this->_has(14);
    }
    
    /**
     * Clear <systemSupportedLocale> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearSystemSupportedLocale(){
      return $this->_clear(14);
    }
    
    /**
     * Get <systemSupportedLocale> value
     *
     * @param int $idx
     * @return string
     */
    public function getSystemSupportedLocale($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <systemSupportedLocale> value
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function setSystemSupportedLocale( $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <systemSupportedLocale>
     *
     * @return string[]
     */
    public function getSystemSupportedLocaleList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <systemSupportedLocale>
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function addSystemSupportedLocale( $value){
     return $this->_add(14, $value);
    }
    
    /**
     * Check if <glExtension> has a value
     *
     * @return boolean
     */
    public function hasGlExtension(){
      return $this->_has(15);
    }
    
    /**
     * Clear <glExtension> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearGlExtension(){
      return $this->_clear(15);
    }
    
    /**
     * Get <glExtension> value
     *
     * @param int $idx
     * @return string
     */
    public function getGlExtension($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <glExtension> value
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function setGlExtension( $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <glExtension>
     *
     * @return string[]
     */
    public function getGlExtensionList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <glExtension>
     *
     * @param string $value
     * @return \DeviceConfigurationProto
     */
    public function addGlExtension( $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <deviceClass> has a value
     *
     * @return boolean
     */
    public function hasDeviceClass(){
      return $this->_has(16);
    }
    
    /**
     * Clear <deviceClass> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearDeviceClass(){
      return $this->_clear(16);
    }
    
    /**
     * Get <deviceClass> value
     *
     * @return int
     */
    public function getDeviceClass(){
      return $this->_get(16);
    }
    
    /**
     * Set <deviceClass> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setDeviceClass( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <maxApkDownloadSizeMb> has a value
     *
     * @return boolean
     */
    public function hasMaxApkDownloadSizeMb(){
      return $this->_has(17);
    }
    
    /**
     * Clear <maxApkDownloadSizeMb> value
     *
     * @return \DeviceConfigurationProto
     */
    public function clearMaxApkDownloadSizeMb(){
      return $this->_clear(17);
    }
    
    /**
     * Get <maxApkDownloadSizeMb> value
     *
     * @return int
     */
    public function getMaxApkDownloadSizeMb(){
      return $this->_get(17);
    }
    
    /**
     * Set <maxApkDownloadSizeMb> value
     *
     * @param int $value
     * @return \DeviceConfigurationProto
     */
    public function setMaxApkDownloadSizeMb( $value){
      return $this->_set(17, $value);
    }
  }
}

