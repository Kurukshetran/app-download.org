<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: checkin.proto
//   Date: 2014-07-20 12:33:10

namespace  {

  class AndroidCheckinRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $imei = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $digest = null;
    
    /**  @var \AndroidCheckinProto */
    public $checkin = null;
    
    /**  @var string */
    public $desiredBuild = null;
    
    /**  @var string */
    public $locale = null;
    
    /**  @var int */
    public $loggingId = null;
    
    /**  @var string */
    public $marketCheckin = null;
    
    /**  @var string[]  */
    public $macAddr = array();
    
    /**  @var string */
    public $meid = null;
    
    /**  @var string[]  */
    public $accountCookie = array();
    
    /**  @var string */
    public $timeZone = null;
    
    /**  @var int */
    public $securityToken = null;
    
    /**  @var int */
    public $version = null;
    
    /**  @var string[]  */
    public $otaCert = array();
    
    /**  @var string */
    public $serialNumber = null;
    
    /**  @var string */
    public $esn = null;
    
    /**  @var \DeviceConfigurationProto */
    public $deviceConfiguration = null;
    
    /**  @var string[]  */
    public $macAddrType = array();
    
    /**  @var int */
    public $fragment = null;
    
    /**  @var string */
    public $userName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.AndroidCheckinRequest');

      // OPTIONAL STRING imei = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "imei";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING digest = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "digest";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE checkin = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "checkin";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\AndroidCheckinProto';
      $descriptor->addField($f);

      // OPTIONAL STRING desiredBuild = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "desiredBuild";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING locale = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "locale";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 loggingId = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "loggingId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING marketCheckin = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "marketCheckin";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING macAddr = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "macAddr";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING meid = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "meid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING accountCookie = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "accountCookie";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING timeZone = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "timeZone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 securityToken = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "securityToken";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 version = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING otaCert = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "otaCert";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING serialNumber = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "serialNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING esn = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "esn";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE deviceConfiguration = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "deviceConfiguration";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\DeviceConfigurationProto';
      $descriptor->addField($f);

      // REPEATED STRING macAddrType = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "macAddrType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 fragment = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "fragment";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING userName = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "userName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <imei> has a value
     *
     * @return boolean
     */
    public function hasImei(){
      return $this->_has(1);
    }
    
    /**
     * Clear <imei> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearImei(){
      return $this->_clear(1);
    }
    
    /**
     * Get <imei> value
     *
     * @return string
     */
    public function getImei(){
      return $this->_get(1);
    }
    
    /**
     * Set <imei> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setImei( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \AndroidCheckinRequest
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <digest> has a value
     *
     * @return boolean
     */
    public function hasDigest(){
      return $this->_has(3);
    }
    
    /**
     * Clear <digest> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearDigest(){
      return $this->_clear(3);
    }
    
    /**
     * Get <digest> value
     *
     * @return string
     */
    public function getDigest(){
      return $this->_get(3);
    }
    
    /**
     * Set <digest> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setDigest( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <checkin> has a value
     *
     * @return boolean
     */
    public function hasCheckin(){
      return $this->_has(4);
    }
    
    /**
     * Clear <checkin> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearCheckin(){
      return $this->_clear(4);
    }
    
    /**
     * Get <checkin> value
     *
     * @return \AndroidCheckinProto
     */
    public function getCheckin(){
      return $this->_get(4);
    }
    
    /**
     * Set <checkin> value
     *
     * @param \AndroidCheckinProto $value
     * @return \AndroidCheckinRequest
     */
    public function setCheckin(\AndroidCheckinProto $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <desiredBuild> has a value
     *
     * @return boolean
     */
    public function hasDesiredBuild(){
      return $this->_has(5);
    }
    
    /**
     * Clear <desiredBuild> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearDesiredBuild(){
      return $this->_clear(5);
    }
    
    /**
     * Get <desiredBuild> value
     *
     * @return string
     */
    public function getDesiredBuild(){
      return $this->_get(5);
    }
    
    /**
     * Set <desiredBuild> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setDesiredBuild( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <locale> has a value
     *
     * @return boolean
     */
    public function hasLocale(){
      return $this->_has(6);
    }
    
    /**
     * Clear <locale> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearLocale(){
      return $this->_clear(6);
    }
    
    /**
     * Get <locale> value
     *
     * @return string
     */
    public function getLocale(){
      return $this->_get(6);
    }
    
    /**
     * Set <locale> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setLocale( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <loggingId> has a value
     *
     * @return boolean
     */
    public function hasLoggingId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <loggingId> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearLoggingId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <loggingId> value
     *
     * @return int
     */
    public function getLoggingId(){
      return $this->_get(7);
    }
    
    /**
     * Set <loggingId> value
     *
     * @param int $value
     * @return \AndroidCheckinRequest
     */
    public function setLoggingId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <marketCheckin> has a value
     *
     * @return boolean
     */
    public function hasMarketCheckin(){
      return $this->_has(8);
    }
    
    /**
     * Clear <marketCheckin> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearMarketCheckin(){
      return $this->_clear(8);
    }
    
    /**
     * Get <marketCheckin> value
     *
     * @return string
     */
    public function getMarketCheckin(){
      return $this->_get(8);
    }
    
    /**
     * Set <marketCheckin> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setMarketCheckin( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <macAddr> has a value
     *
     * @return boolean
     */
    public function hasMacAddr(){
      return $this->_has(9);
    }
    
    /**
     * Clear <macAddr> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearMacAddr(){
      return $this->_clear(9);
    }
    
    /**
     * Get <macAddr> value
     *
     * @param int $idx
     * @return string
     */
    public function getMacAddr($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <macAddr> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setMacAddr( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <macAddr>
     *
     * @return string[]
     */
    public function getMacAddrList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <macAddr>
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function addMacAddr( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <meid> has a value
     *
     * @return boolean
     */
    public function hasMeid(){
      return $this->_has(10);
    }
    
    /**
     * Clear <meid> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearMeid(){
      return $this->_clear(10);
    }
    
    /**
     * Get <meid> value
     *
     * @return string
     */
    public function getMeid(){
      return $this->_get(10);
    }
    
    /**
     * Set <meid> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setMeid( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <accountCookie> has a value
     *
     * @return boolean
     */
    public function hasAccountCookie(){
      return $this->_has(11);
    }
    
    /**
     * Clear <accountCookie> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearAccountCookie(){
      return $this->_clear(11);
    }
    
    /**
     * Get <accountCookie> value
     *
     * @param int $idx
     * @return string
     */
    public function getAccountCookie($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <accountCookie> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setAccountCookie( $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <accountCookie>
     *
     * @return string[]
     */
    public function getAccountCookieList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <accountCookie>
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function addAccountCookie( $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <timeZone> has a value
     *
     * @return boolean
     */
    public function hasTimeZone(){
      return $this->_has(12);
    }
    
    /**
     * Clear <timeZone> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearTimeZone(){
      return $this->_clear(12);
    }
    
    /**
     * Get <timeZone> value
     *
     * @return string
     */
    public function getTimeZone(){
      return $this->_get(12);
    }
    
    /**
     * Set <timeZone> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setTimeZone( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <securityToken> has a value
     *
     * @return boolean
     */
    public function hasSecurityToken(){
      return $this->_has(13);
    }
    
    /**
     * Clear <securityToken> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearSecurityToken(){
      return $this->_clear(13);
    }
    
    /**
     * Get <securityToken> value
     *
     * @return int
     */
    public function getSecurityToken(){
      return $this->_get(13);
    }
    
    /**
     * Set <securityToken> value
     *
     * @param int $value
     * @return \AndroidCheckinRequest
     */
    public function setSecurityToken( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(14);
    }
    
    /**
     * Clear <version> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearVersion(){
      return $this->_clear(14);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(14);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \AndroidCheckinRequest
     */
    public function setVersion( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <otaCert> has a value
     *
     * @return boolean
     */
    public function hasOtaCert(){
      return $this->_has(15);
    }
    
    /**
     * Clear <otaCert> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearOtaCert(){
      return $this->_clear(15);
    }
    
    /**
     * Get <otaCert> value
     *
     * @param int $idx
     * @return string
     */
    public function getOtaCert($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <otaCert> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setOtaCert( $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <otaCert>
     *
     * @return string[]
     */
    public function getOtaCertList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <otaCert>
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function addOtaCert( $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <serialNumber> has a value
     *
     * @return boolean
     */
    public function hasSerialNumber(){
      return $this->_has(16);
    }
    
    /**
     * Clear <serialNumber> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearSerialNumber(){
      return $this->_clear(16);
    }
    
    /**
     * Get <serialNumber> value
     *
     * @return string
     */
    public function getSerialNumber(){
      return $this->_get(16);
    }
    
    /**
     * Set <serialNumber> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setSerialNumber( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <esn> has a value
     *
     * @return boolean
     */
    public function hasEsn(){
      return $this->_has(17);
    }
    
    /**
     * Clear <esn> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearEsn(){
      return $this->_clear(17);
    }
    
    /**
     * Get <esn> value
     *
     * @return string
     */
    public function getEsn(){
      return $this->_get(17);
    }
    
    /**
     * Set <esn> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setEsn( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <deviceConfiguration> has a value
     *
     * @return boolean
     */
    public function hasDeviceConfiguration(){
      return $this->_has(18);
    }
    
    /**
     * Clear <deviceConfiguration> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearDeviceConfiguration(){
      return $this->_clear(18);
    }
    
    /**
     * Get <deviceConfiguration> value
     *
     * @return \DeviceConfigurationProto
     */
    public function getDeviceConfiguration(){
      return $this->_get(18);
    }
    
    /**
     * Set <deviceConfiguration> value
     *
     * @param \DeviceConfigurationProto $value
     * @return \AndroidCheckinRequest
     */
    public function setDeviceConfiguration(\DeviceConfigurationProto $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <macAddrType> has a value
     *
     * @return boolean
     */
    public function hasMacAddrType(){
      return $this->_has(19);
    }
    
    /**
     * Clear <macAddrType> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearMacAddrType(){
      return $this->_clear(19);
    }
    
    /**
     * Get <macAddrType> value
     *
     * @param int $idx
     * @return string
     */
    public function getMacAddrType($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <macAddrType> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setMacAddrType( $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <macAddrType>
     *
     * @return string[]
     */
    public function getMacAddrTypeList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <macAddrType>
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function addMacAddrType( $value){
     return $this->_add(19, $value);
    }
    
    /**
     * Check if <fragment> has a value
     *
     * @return boolean
     */
    public function hasFragment(){
      return $this->_has(20);
    }
    
    /**
     * Clear <fragment> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearFragment(){
      return $this->_clear(20);
    }
    
    /**
     * Get <fragment> value
     *
     * @return int
     */
    public function getFragment(){
      return $this->_get(20);
    }
    
    /**
     * Set <fragment> value
     *
     * @param int $value
     * @return \AndroidCheckinRequest
     */
    public function setFragment( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <userName> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(21);
    }
    
    /**
     * Clear <userName> value
     *
     * @return \AndroidCheckinRequest
     */
    public function clearUserName(){
      return $this->_clear(21);
    }
    
    /**
     * Get <userName> value
     *
     * @return string
     */
    public function getUserName(){
      return $this->_get(21);
    }
    
    /**
     * Set <userName> value
     *
     * @param string $value
     * @return \AndroidCheckinRequest
     */
    public function setUserName( $value){
      return $this->_set(21, $value);
    }
  }
}

namespace  {

  class AndroidCheckinResponse extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $statsOk = null;
    
    /**  @var \AndroidIntentProto[]  */
    public $intent = array();
    
    /**  @var int */
    public $timeMsec = null;
    
    /**  @var string */
    public $digest = null;
    
    /**  @var \GservicesSetting[]  */
    public $setting = array();
    
    /**  @var boolean */
    public $marketOk = null;
    
    /**  @var int */
    public $androidId = null;
    
    /**  @var int */
    public $securityToken = null;
    
    /**  @var boolean */
    public $settingsDiff = null;
    
    /**  @var string[]  */
    public $deleteSetting = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.AndroidCheckinResponse');

      // OPTIONAL BOOL statsOk = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "statsOk";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE intent = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "intent";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\AndroidIntentProto';
      $descriptor->addField($f);

      // OPTIONAL INT64 timeMsec = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "timeMsec";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING digest = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "digest";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE setting = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "setting";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\GservicesSetting';
      $descriptor->addField($f);

      // OPTIONAL BOOL marketOk = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "marketOk";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 androidId = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "androidId";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 securityToken = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "securityToken";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL settingsDiff = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "settingsDiff";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING deleteSetting = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "deleteSetting";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <statsOk> has a value
     *
     * @return boolean
     */
    public function hasStatsOk(){
      return $this->_has(1);
    }
    
    /**
     * Clear <statsOk> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearStatsOk(){
      return $this->_clear(1);
    }
    
    /**
     * Get <statsOk> value
     *
     * @return boolean
     */
    public function getStatsOk(){
      return $this->_get(1);
    }
    
    /**
     * Set <statsOk> value
     *
     * @param boolean $value
     * @return \AndroidCheckinResponse
     */
    public function setStatsOk( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <intent> has a value
     *
     * @return boolean
     */
    public function hasIntent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <intent> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearIntent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <intent> value
     *
     * @param int $idx
     * @return \AndroidIntentProto
     */
    public function getIntent($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <intent> value
     *
     * @param \AndroidIntentProto $value
     * @return \AndroidCheckinResponse
     */
    public function setIntent(\AndroidIntentProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <intent>
     *
     * @return \AndroidIntentProto[]
     */
    public function getIntentList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <intent>
     *
     * @param \AndroidIntentProto $value
     * @return \AndroidCheckinResponse
     */
    public function addIntent(\AndroidIntentProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <timeMsec> has a value
     *
     * @return boolean
     */
    public function hasTimeMsec(){
      return $this->_has(3);
    }
    
    /**
     * Clear <timeMsec> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearTimeMsec(){
      return $this->_clear(3);
    }
    
    /**
     * Get <timeMsec> value
     *
     * @return int
     */
    public function getTimeMsec(){
      return $this->_get(3);
    }
    
    /**
     * Set <timeMsec> value
     *
     * @param int $value
     * @return \AndroidCheckinResponse
     */
    public function setTimeMsec( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <digest> has a value
     *
     * @return boolean
     */
    public function hasDigest(){
      return $this->_has(4);
    }
    
    /**
     * Clear <digest> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearDigest(){
      return $this->_clear(4);
    }
    
    /**
     * Get <digest> value
     *
     * @return string
     */
    public function getDigest(){
      return $this->_get(4);
    }
    
    /**
     * Set <digest> value
     *
     * @param string $value
     * @return \AndroidCheckinResponse
     */
    public function setDigest( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <setting> has a value
     *
     * @return boolean
     */
    public function hasSetting(){
      return $this->_has(5);
    }
    
    /**
     * Clear <setting> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearSetting(){
      return $this->_clear(5);
    }
    
    /**
     * Get <setting> value
     *
     * @param int $idx
     * @return \GservicesSetting
     */
    public function getSetting($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <setting> value
     *
     * @param \GservicesSetting $value
     * @return \AndroidCheckinResponse
     */
    public function setSetting(\GservicesSetting $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <setting>
     *
     * @return \GservicesSetting[]
     */
    public function getSettingList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <setting>
     *
     * @param \GservicesSetting $value
     * @return \AndroidCheckinResponse
     */
    public function addSetting(\GservicesSetting $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <marketOk> has a value
     *
     * @return boolean
     */
    public function hasMarketOk(){
      return $this->_has(6);
    }
    
    /**
     * Clear <marketOk> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearMarketOk(){
      return $this->_clear(6);
    }
    
    /**
     * Get <marketOk> value
     *
     * @return boolean
     */
    public function getMarketOk(){
      return $this->_get(6);
    }
    
    /**
     * Set <marketOk> value
     *
     * @param boolean $value
     * @return \AndroidCheckinResponse
     */
    public function setMarketOk( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <androidId> has a value
     *
     * @return boolean
     */
    public function hasAndroidId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <androidId> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearAndroidId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <androidId> value
     *
     * @return int
     */
    public function getAndroidId(){
      return $this->_get(7);
    }
    
    /**
     * Set <androidId> value
     *
     * @param int $value
     * @return \AndroidCheckinResponse
     */
    public function setAndroidId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <securityToken> has a value
     *
     * @return boolean
     */
    public function hasSecurityToken(){
      return $this->_has(8);
    }
    
    /**
     * Clear <securityToken> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearSecurityToken(){
      return $this->_clear(8);
    }
    
    /**
     * Get <securityToken> value
     *
     * @return int
     */
    public function getSecurityToken(){
      return $this->_get(8);
    }
    
    /**
     * Set <securityToken> value
     *
     * @param int $value
     * @return \AndroidCheckinResponse
     */
    public function setSecurityToken( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <settingsDiff> has a value
     *
     * @return boolean
     */
    public function hasSettingsDiff(){
      return $this->_has(9);
    }
    
    /**
     * Clear <settingsDiff> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearSettingsDiff(){
      return $this->_clear(9);
    }
    
    /**
     * Get <settingsDiff> value
     *
     * @return boolean
     */
    public function getSettingsDiff(){
      return $this->_get(9);
    }
    
    /**
     * Set <settingsDiff> value
     *
     * @param boolean $value
     * @return \AndroidCheckinResponse
     */
    public function setSettingsDiff( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <deleteSetting> has a value
     *
     * @return boolean
     */
    public function hasDeleteSetting(){
      return $this->_has(10);
    }
    
    /**
     * Clear <deleteSetting> value
     *
     * @return \AndroidCheckinResponse
     */
    public function clearDeleteSetting(){
      return $this->_clear(10);
    }
    
    /**
     * Get <deleteSetting> value
     *
     * @param int $idx
     * @return string
     */
    public function getDeleteSetting($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <deleteSetting> value
     *
     * @param string $value
     * @return \AndroidCheckinResponse
     */
    public function setDeleteSetting( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <deleteSetting>
     *
     * @return string[]
     */
    public function getDeleteSettingList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <deleteSetting>
     *
     * @param string $value
     * @return \AndroidCheckinResponse
     */
    public function addDeleteSetting( $value){
     return $this->_add(10, $value);
    }
  }
}

namespace  {

  class GservicesSetting extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.GservicesSetting');

      // OPTIONAL BYTES name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \GservicesSetting
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \GservicesSetting
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \GservicesSetting
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \GservicesSetting
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

